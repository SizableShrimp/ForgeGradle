buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'org.eclipse.jgit:org.eclipse.jgit:5.10.0.202012080955-r'
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'maven'

project.ext {
    GIT_INFO = gitInfo(rootProject.file('.'))
    OLD_FORMAT = '1.0-SNAPSHOT'
}

group = 'net.minecraftforge.gradle'
version = "${project.ext.GIT_INFO.tag}.${project.ext.GIT_INFO.offset}"
println('Version: ' + project.version)
archivesBaseName = 'ForgeGradle'
targetCompatibility = '1.6'
sourceCompatibility = '1.6'

repositories {
    maven {
        name = "forge"
        url = "https://maven.minecraftforge.net"
    }
    maven {
        // because Srg2Source needs an eclipse dependency.
        name = "eclipse"
        url = "https://repo.eclipse.org/content/groups/eclipse/"
    }
    maven {
        name = "central"
        url = "https://repo1.maven.org/maven2"
    }
    maven {
        name = "mojang"
        url = "https://libraries.minecraft.net/"
    }
}

configurations {
    deployerJars
}

dependencies {
    compile gradleApi()
    
    // moved to the beginning to be the overrider
    compile 'org.ow2.asm:asm-debug-all:4.1' // Debug version, so we can have generics!

    compile 'net.sourceforge.argo:argo:3.4' // json stuff? perhaps replace with json slurper and stuff?
    compile 'net.sf.opencsv:opencsv:2.3' // reading CSVs.. also used by SpecialSource
    compile 'com.cloudbees:diff4j:1.1' // for difing and patching
    compile 'com.github.abrarsyed.jastyle:jAstyle:1.2' // formatting

    compile 'com.github.jponge:lzma-java:1.3' // replaces the LZMA binary
    compile 'com.nothome:javaxdelta:2.0.1' // GDIFF implementation for BinPatches
    compile 'com.google.code.gson:gson:2.2.4' // Used instead of Argo for buuilding changelog.
    compile 'com.github.tony19:named-regexp:0.2.3' // 1.7 Named regexp features
    
    compile 'net.md-5:SpecialSource:1.6.1' // deobf and reobs
    
    // mcp stuff
    compile 'de.oceanlabs.mcp:RetroGuard:3.6.6'
    compile 'de.oceanlabs.mcp:mcinjector:3.1'

    // stupid maven
    deployerJars "org.apache.maven.wagon:wagon-ssh:2.2"
}

artifacts {
    archives jar
}

jar {
    manifest {
        attributes 'version':project.version, 'javaCompliance': project.targetCompatibility
        attributes 'group':project.group
        attributes 'Implementation-Version': project.version + "-" + GIT_INFO.hash
    }
}

test {
    // These tests are outdated, and I can't be arsed to fix them
    exclude "*"
}

uploadArchives {
    repositories.mavenDeployer {

        dependsOn 'build'

        if (System.env.MAVEN_USER)
        {
            repository(url: "https://maven.minecraftforge.net/") {
                authentication(userName: System.env.MAVEN_USER, password: System.env.MAVEN_PASSWORD)
            }
        }
        else
        {
            // local repo folder. Might wanna juset use  gradle install   if you wanans end it to maven-local
            repository(url: 'file:///' + System.env.SHRIMP_MAVEN)
        }


        pom {
            groupId = project.group
            version = project.hasProperty('oldFormat') ? OLD_FORMAT : project.version
            artifactId = project.archivesBaseName
            project {
                name project.archivesBaseName
                packaging 'jar'
                description 'Gradle plugin for Forge'
                url 'https://github.com/MinecraftForge/ForgeGradle'

                scm {
                    url 'https://github.com/MinecraftForge/ForgeGradle'
                    connection 'scm:git:git://github.com/MinecraftForge/ForgeGradle.git'
                    developerConnection 'scm:git:git@github.com:MinecraftForge/ForgeGradle.git'
                }

                issueManagement {
                    system 'github'
                    url 'https://github.com/MinecraftForge/ForgeGradle/issues'
                }

                licenses {
                    license {
                        name 'Eclipse Public License (EPL), Version 1.0'
                        url 'http://www.eclipse.org/legal/epl-v10.html'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id 'AbrarSyed'
                        name 'Abrar Syed'
                        roles { role 'developer' }
                    }
                    developer {
                        id 'LexManos'
                        name 'Lex Manos'
                        roles { role 'developer' }
                    }
                }
            }
        }
    }
}

// write out version so its convenient for doc deployment
file('build').mkdirs()
file('build/version.txt').text = version;

def gitInfo(dir) {
    String.metaClass.rsplit = { String del, int limit = -1 ->
        def lst = new ArrayList()
        def x = 0, idx
        def tmp = delegate
        while ((idx = tmp.lastIndexOf(del)) != -1 && (limit == -1 || x++ < limit)) {
            lst.add(0, tmp.substring(idx + del.length(), tmp.length()))
            tmp = tmp.substring(0, idx)
        }
        lst.add(0, tmp)
        return lst
    }

    def git = null
    try {
        git = org.eclipse.jgit.api.Git.open(dir)
    } catch (org.eclipse.jgit.errors.RepositoryNotFoundException e) {
        return [
                tag: '0.0',
                offset: '0',
                hash: '00000000',
                branch: 'master',
                commit: '0000000000000000000000',
                abbreviatedId: '00000000'
        ]
    }
    def desc = git.describe().setLong(true).setTags(true).call().rsplit('-', 2)
    def head = git.repository.exactRef('HEAD')
    def longBranch = head.symbolic ? head?.target?.name : null // matches Repository.getFullBranch() but returning null when on a detached HEAD

    def ret = [:]
    ret.tag = desc[0]
    ret.offset = desc[1]
    ret.hash = desc[2]
    ret.branch = longBranch != null ? org.eclipse.jgit.lib.Repository.shortenRefName(longBranch) : null
    ret.commit = org.eclipse.jgit.lib.ObjectId.toString(head.objectId)
    ret.abbreviatedId = head.objectId.abbreviate(8).name()

    return ret
}
